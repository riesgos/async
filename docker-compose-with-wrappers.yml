version: "3.3"

# Please note: This docker-compose file needs to have the
# jar for the wrappers in place on
# ./asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar
# If it is not, please run `mvn package` before.
services:
  deus_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
      - wps
    environment:
      appID: 'deus-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.DeusWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/postgres'
      spring.datasource.username: 'postgres'
      spring.datasource.password: 'postgres'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: 'shakemap-resampler-success,assetmaster-success,modelprop-eq-success'
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'deus-success'
      pulsar.failureTopic: 'deus-failure'
      wps.wpsUrl: 'http://riesgos-wps:8080/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.DeusProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: admin
      filestorage.password: secretpassword
      filestorage.bucketName: riesgosfiles
      filestorage.access: http://filestorage:9000/riesgosfiles/

  assetmaster_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
      - wps
    environment:
      appID: 'assetmaster-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.AssetmasterWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/postgres'
      spring.datasource.username: 'postgres'
      spring.datasource.password: 'postgres'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: ''
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'assetmaster-success'
      pulsar.failureTopic: 'assetmaster-failure'
      wps.wpsUrl: 'http://riesgos-wps:8080/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.AssetmasterProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: admin
      filestorage.password: secretpassword
      filestorage.bucketName: riesgosfiles
      filestorage.access: http://filestorage:9000/riesgosfiles/

  modelprop_eq_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
      - wps
    environment:
      appID: 'modelprop-eq-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.ModelpropEqWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/postgres'
      spring.datasource.username: 'postgres'
      spring.datasource.password: 'postgres'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: ''
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'modelprop-eq-success'
      pulsar.failureTopic: 'modelprop-eq-failure'
      wps.wpsUrl: 'http://riesgos-wps:8080/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.ModelpropProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: admin
      filestorage.password: secretpassword
      filestorage.bucketName: riesgosfiles
      filestorage.access: http://filestorage:9000/riesgosfiles/

  modelprop_ts_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
      - wps
    environment:
      appID: 'modelprop-ts-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.ModelpropTsWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/postgres'
      spring.datasource.username: 'postgres'
      spring.datasource.password: 'postgres'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: ''
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'modelprop-ts-success'
      pulsar.failureTopic: 'modelprop-ts-failure'
      wps.wpsUrl: 'http://riesgos-wps:8080/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.ModelpropProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: admin
      filestorage.password: secretpassword
      filestorage.bucketName: riesgosfiles
      filestorage.access: http://filestorage:9000/riesgosfiles/

  shakyground_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
      - wps
    environment:
      appID: 'shakyground-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.ShakygroundWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/postgres'
      spring.datasource.username: 'postgres'
      spring.datasource.password: 'postgres'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: 'quakeledger-success'
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'shakyground-success'
      pulsar.failureTopic: 'shakyground-failure'
      wps.wpsUrl: 'http://riesgos-wps:8080/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.ShakygroundProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: admin
      filestorage.password: secretpassword
      filestorage.bucketName: riesgosfiles
      filestorage.access: http://filestorage:9000/riesgosfiles/

  shakemap_resampler_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
    environment:
      appID: 'shakemap-resampler-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.ShakemapResamplerWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/postgres'
      spring.datasource.username: 'postgres'
      spring.datasource.password: 'postgres'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: 'shakyground-success'
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'shakemap-resampler-success'
      pulsar.failureTopic: 'shakemap-resampler-failure'
      wps.wpsUrl: 'http://riesgos-wps:8080/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.shakemap_sampler'
      wps.dialect: 'javaps'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: admin
      filestorage.password: secretpassword
      filestorage.bucketName: riesgosfiles
      filestorage.access: http://filestorage:9000/riesgosfiles/

  quakeledger_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
      - wps
    environment:
      appID: 'quakeledger-asyncwrapper'
      wrapperclass: 'org.n.riesgos.asyncwrapper.dummy.QuakeledgerWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/postgres'
      spring.datasource.username: 'postgres'
      spring.datasource.password: 'postgres'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: ''
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'quakeledger-success'
      pulsar.failureTopic: 'quakeledger-failure'
      wps.wpsUrl: 'http://riesgos-wps:8080/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.QuakeledgerProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: admin
      filestorage.password: secretpassword
      filestorage.bucketName: riesgosfiles
      filestorage.access: http://filestorage:9000/riesgosfiles/

  backend:
    image: async-backend
    build:
      context: backend
    volumes:
      - './backend:/usr/src/app'
    depends_on:
      - db
    networks:
      - db
      - filestorage
      - web
    environment:
      ROOT_PATH: '/api/v1'
      SQLALCHEMY_DATABASE_URL: 'postgresql://postgres:postgres@db:5432/postgres'
      BACKEND_USER_EMAIL: dummy@localhost
      BACKEND_USER_PASSWORD: test123

  backend_migrations:
    image: flyway/flyway
    volumes:
      - ./backend/migrations:/flyway/sql
    networks:
      - db
    depends_on:
      - db
    command: -url=jdbc:postgresql://db:5432/postgres -schemas=public -user=postgres -password=postgres -connectRetries=60 migrate

  queue:
    image: apachepulsar/pulsar-standalone
    ports:
      - 8081:80
      - 8080:8080
      - 6650:6650
    networks:
      - queue
    volumes:
      - pulsardata:/pulsar/data
      - pulsarconf:/pulsar/conf
    environment:
      LOG4J_FORMAT_MSG_NO_LOOKUPS: 'true'

  db:
    image: postgres:14.1-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5432:5432
    networks:
      - db
    volumes:
      - postgresdata:/var/lib/postgresql/data

  filestorage:
    image: minio/minio:RELEASE.2022-10-20T00-55-09Z
    volumes:
      - filestoragedata:/data
    networks:
      - filestorage
    ports:
      - 9090:9090
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secretpassword
    command: server /data --console-address ':9090'

  filestorage_bucket_creation:
    build:
      context: 'filestorage/bucketcreation'
    networks:
      - filestorage
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: secretpassword
      MINIO_SERVER: filestorage
      MINIO_PORT: 9000
      MINIO_BUCKET_NAME: riesgosfiles

  frontend:
    image: async-frontend
    build:
      context: newfrontend
    ports:
      - 4200:4200
    networks:
      - web
    volumes:
      - './newfrontend:/usr/src/app'

  reverse_proxy:
    image: nginx:1.23.2-alpine
    ports:
      - 80:80
    networks:
      - filestorage
      - web
      - wps
    depends_on:
      - backend
    volumes:
      - ./reverse_proxy/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf:ro

  riesgos-wps:
    image: gfzriesgos/riesgos-wps:20220908
    restart: always
    ports:
      - "8082:8080"
    depends_on:
      - shakyground
      - quakeledger
      - assetmaster
      - modelprop
      - deus
      - shakemap_sampler
    environment:
      - CATALINA_OPTS=-Xmx4g -Xms4g 
      - RIESGOS_MAX_CACHE_SIZE_MB=1024
      - RIESGOS_GEOSERVER_ACCESS_BASE_URL=http://riesgos-wps:8082/geoserver
      - RIESGOS_GEOSERVER_SEND_BASE_URL=http://riesgos-wps:8080/geoserver
      - RIESGOS_GEOSERVER_USERNAME=admin
      - RIESGOS_GEOSERVER_PASSWORD=geoserver
    volumes:
      # We need to pass the docker.sock as the WPS itself needs to run
      # docker commands
      - "/var/run/docker.sock:/var/run/docker.sock"
      # We also want a volume for the riesgos-json-config files.
      # As it is where the processes are defined.
      - "riesgos-wps-json-config:/usr/share/riesgos/json-configurations"
      # We need the hsqldb in order to handle the internal configuration
      # of the WPS server settings.
      - "riesgos-wps-hsqldb-dev:/usr/local/tomcat/webapps/wps/WEB-INF/classes/db/data"
      # And we need to store the server.xml, as we want to overwrite the
      # timeout settings.
      #- "riesgos-wps-server-config:/usr/local/tomcat/conf"
      - "tomcat-folder:/usr/local/tomcat"
    networks:
      - wps
      - filestorage

  shakyground:
    image: gfzriesgos/shakyground:2.0.0
    volumes:
      - "shakyground-metadata:/usr/share/git/shakyground/metadata"

  quakeledger:
    image: gfzriesgos/quakeledger:1.0.1
    volumes:
      - "quakeledger-metadata:/usr/share/git/quakeledger/metadata"

  assetmaster:
    image: gfzriesgos/assetmaster:2.1.0
    volumes:
      - "assetmaster-metadata:/usr/share/git/assetmaster/metadata"

  modelprop:
    image: gfzriesgos/modelprop:1.1.1
    volumes:
      - "modelprop-metadata:/usr/share/git/modelprop/metadata"

  deus:
    image: gfzriesgos/deus:2.1.1
    volumes:
      - "deus-metadata:/usr/share/git/deus/metadata"

  shakemap_sampler:
    build: 
      context: ./shakemap_sampler
      dockerfile: metadata/Dockerfile
    image: shakemap_sampler:latest
    volumes:
      - "./shakemap_sampler/metadata:/usr/share/git/shakemap_sampler/metadata"

  wps-init:
    image: python:3.10.5-alpine3.15
    entrypoint: "/entrypoint.sh"
    depends_on:
      - riesgos-wps
    environment:
      WPS_HOSTPORT: '8080'
      WPS_HOSTNAME: 'riesgos-wps'
    volumes:
      - "./wps/init/entrypoint.sh:/entrypoint.sh"
      - "./wps/init/init_wps.py:/init_wps.py"
      - "riesgos-wps-json-config:/wps/json-configurations"
      - "shakyground-metadata:/wps/processes/shakyground"
      - "quakeledger-metadata:/wps/processes/quakeledger"
      - "assetmaster-metadata:/wps/processes/assetmaster"
      - "modelprop-metadata:/wps/processes/modelprop"
      - "deus-metadata:/wps/processes/deus"    
      - "./shakemap_sampler/metadata:/wps/processes/shakemap_sampler"
      - "tomcat-folder:/tomcat"
    networks:
      - wps


volumes:
  postgresdata:
  pulsardata:
  pulsarconf:
  filestoragedata:
  riesgos-wps-hsqldb-dev:
  riesgos-wps-json-config:
  tomcat-folder:
  shakyground-metadata:
  quakeledger-metadata:
  assetmaster-metadata:
  modelprop-metadata:
  deus-metadata:
networks:
  db:
  queue:
  filestorage:
  web:
  wps:
