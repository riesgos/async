version: "3.3"

# Please note: This docker-compose file needs to have the
# jar for the wrappers in place on
# ./asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar
# If it is not, please run `mvn package` before.
services:
  deus_eq_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
    environment:
      appID: 'deus-eq-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.DeusEqWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/${DATABASE_USER:?error}'
      spring.datasource.username: '${DATABASE_USER:?error}'
      spring.datasource.password: '${DATABASE_PASSWORD:?error}'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: 'shakemap-resampler-success,assetmaster-success,modelprop-eq-success'
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'deus-eq-success'
      pulsar.failureTopic: 'deus-eq-failure'
      wps.wpsUrl: 'https://rz-vm140.gfz-potsdam.de/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.DeusProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: ${FILESTORAGE_USER:?error}
      filestorage.password: ${FILESTORAGE_PASSWORD:?error}
      filestorage.bucketName: riesgosfiles
      filestorage.access: ${FILESTORAGE_SERVER:?error}/riesgosfiles/

  deus_ts_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
    environment:
      appID: 'deus-ts-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.DeusTsWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/${DATABASE_USER:?error}'
      spring.datasource.username: '${DATABASE_USER:?error}'
      spring.datasource.password: '${DATABASE_PASSWORD:?error}'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      # TODO Fix tsunami topic name
      pulsar.inputTopics: 'tsunami-success,deus-eq-success,modelprop-ts-success'
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'deus-ts-success'
      pulsar.failureTopic: 'deus-ts-failure'
      wps.wpsUrl: 'https://rz-vm140.gfz-potsdam.de/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.DeusProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: ${FILESTORAGE_USER:?error}
      filestorage.password: ${FILESTORAGE_PASSWORD:?error}
      filestorage.bucketName: riesgosfiles
      filestorage.access: ${FILESTORAGE_SERVER:?error}/riesgosfiles/

  assetmaster_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
    environment:
      appID: 'assetmaster-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.AssetmasterWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/${DATABASE_USER:?error}'
      spring.datasource.username: '${DATABASE_USER:?error}'
      spring.datasource.password: '${DATABASE_PASSWORD:?error}'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: ''
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'assetmaster-success'
      pulsar.failureTopic: 'assetmaster-failure'
      wps.wpsUrl: 'https://rz-vm140.gfz-potsdam.de/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.AssetmasterProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: ${FILESTORAGE_USER:?error}
      filestorage.password: ${FILESTORAGE_PASSWORD:?error}
      filestorage.bucketName: riesgosfiles
      filestorage.access: ${FILESTORAGE_SERVER:?error}/riesgosfiles/

  modelprop_eq_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
    environment:
      appID: 'modelprop-eq-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.ModelpropEqWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/${DATABASE_USER:?error}'
      spring.datasource.username: '${DATABASE_USER:?error}'
      spring.datasource.password: '${DATABASE_PASSWORD:?error}'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: ''
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'modelprop-eq-success'
      pulsar.failureTopic: 'modelprop-eq-failure'
      wps.wpsUrl: 'https://rz-vm140.gfz-potsdam.de/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.ModelpropProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: ${FILESTORAGE_USER:?error}
      filestorage.password: ${FILESTORAGE_PASSWORD:?error}
      filestorage.bucketName: riesgosfiles
      filestorage.access: ${FILESTORAGE_SERVER:?error}/riesgosfiles/

  modelprop_ts_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
    environment:
      appID: 'modelprop-ts-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.ModelpropTsWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/${DATABASE_USER:?error}'
      spring.datasource.username: '${DATABASE_USER:?error}'
      spring.datasource.password: '${DATABASE_PASSWORD:?error}'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: ''
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'modelprop-ts-success'
      pulsar.failureTopic: 'modelprop-ts-failure'
      wps.wpsUrl: 'https://rz-vm140.gfz-potsdam.de/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.ModelpropProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: ${FILESTORAGE_USER:?error}
      filestorage.password: ${FILESTORAGE_PASSWORD:?error}
      filestorage.bucketName: riesgosfiles
      filestorage.access: ${FILESTORAGE_SERVER:?error}/riesgosfiles/

  shakyground_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
    environment:
      appID: 'shakyground-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.ShakygroundWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/${DATABASE_USER:?error}'
      spring.datasource.username: '${DATABASE_USER:?error}'
      spring.datasource.password: '${DATABASE_PASSWORD:?error}'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: 'quakeledger-success'
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'shakyground-success'
      pulsar.failureTopic: 'shakyground-failure'
      wps.wpsUrl: 'https://rz-vm140.gfz-potsdam.de/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.ShakygroundProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: ${FILESTORAGE_USER:?error}
      filestorage.password: ${FILESTORAGE_PASSWORD:?error}
      filestorage.bucketName: riesgosfiles
      filestorage.access: ${FILESTORAGE_SERVER:?error}/riesgosfiles/

  shakemap_resampler_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
    environment:
      appID: 'shakemap-resampler-asyncwrapper'
      wrapperClass: 'org.n.riesgos.asyncwrapper.dummy.ShakemapResamplerWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/${DATABASE_USER:?error}'
      spring.datasource.username: '${DATABASE_USER:?error}'
      spring.datasource.password: '${DATABASE_PASSWORD:?error}'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: 'shakyground-success'
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'shakemap-resampler-success'
      pulsar.failureTopic: 'shakemap-resampler-failure'
      wps.wpsUrl: 'https://riesgos.52north.org/javaps/service'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.shakemap_sampler'
      wps.dialect: 'javaps'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: ${FILESTORAGE_USER:?error}
      filestorage.password: ${FILESTORAGE_PASSWORD:?error}
      filestorage.bucketName: riesgosfiles
      filestorage.access: ${FILESTORAGE_SERVER:?error}/riesgosfiles/

  quakeledger_wrapper:
    image: spring-boot-image
    build:
      context: asyncwrapper/dockerfile-spring-boot-baseimage
    volumes:
      - './asyncwrapper/target/asyncwrapper-0.0.1-SNAPSHOT.jar:/app.jar'
    depends_on:
      - db
      - queue
    networks:
      - db
      - queue
      - filestorage
    environment:
      appID: 'quakeledger-asyncwrapper'
      wrapperclass: 'org.n.riesgos.asyncwrapper.dummy.QuakeledgerWrapper'
      spring.datasource.url: 'jdbc:postgresql://db:5432/${DATABASE_USER:?error}'
      spring.datasource.username: '${DATABASE_USER:?error}'
      spring.datasource.password: '${DATABASE_PASSWORD:?error}'
      pulsar.pulsarURL: 'pulsar://queue:6650'
      pulsar.inputTopics: ''
      pulsar.orderTopic: 'new-order'
      pulsar.outputTopic: 'quakeledger-success'
      pulsar.failureTopic: 'quakeledger-failure'
      wps.wpsUrl: 'https://rz-vm140.gfz-potsdam.de/wps/WebProcessingService'
      wps.wpsVersion: '2.0.0'
      wps.process: 'org.n52.gfz.riesgos.algorithm.impl.QuakeledgerProcess'
      filestorage.endpoint: http://filestorage:9000
      filestorage.user: ${FILESTORAGE_USER:?error}
      filestorage.password: ${FILESTORAGE_PASSWORD:?error}
      filestorage.bucketName: riesgosfiles
      filestorage.access: ${FILESTORAGE_SERVER:?error}/riesgosfiles/

  backend:
    image: async-backend
    build:
      context: backend
    volumes:
      - './backend:/usr/src/app'
    depends_on:
      - db
    networks:
      - db
      - filestorage
      - web
    environment:
      ROOT_PATH: '/backend/api/v1'
      SQLALCHEMY_DATABASE_URL: 'postgresql://${DATABASE_USER:?error}:${DATABASE_PASSWORD:?error}@db:5432/${DATABASE_USER:?error}'
      BACKEND_USER_EMAIL: ${BACKEND_USER_EMAIL:?error}
      BACKEND_USER_PASSWORD: ${BACKEND_USER_PASSWORD:?error}

  backend_migrations:
    image: flyway/flyway
    volumes:
      - ./backend/migrations:/flyway/sql
    networks:
      - db
    depends_on:
      - db
    command: -url=jdbc:postgresql://db:5432/${DATABASE_USER:?error} -schemas=public -user=${DATABASE_USER:?error} -password=${DATABASE_PASSWORD:?error} -connectRetries=60 migrate

  queue:
    image: apachepulsar/pulsar-standalone
    networks:
      - queue
    volumes:
      - pulsardata:/pulsar/data
      - pulsarconf:/pulsar/conf
    environment:
      LOG4J_FORMAT_MSG_NO_LOOKUPS: 'true'

  db:
    image: postgres:14.1-alpine
    environment:
      - POSTGRES_USER=${DATABASE_USER:?error}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:?error}
    networks:
      - db
    volumes:
      - postgresdata:/var/lib/postgresql/data

  filestorage:
    image: minio/minio:RELEASE.2022-10-20T00-55-09Z
    volumes:
      - filestoragedata:/data
    networks:
      - filestorage
    environment:
      MINIO_ROOT_USER: ${FILESTORAGE_USER:?error}
      MINIO_ROOT_PASSWORD: ${FILESTORAGE_PASSWORD:?error}
    command: server /data --console-address ':9090'

  filestorage_bucket_creation:
    build:
      context: 'filestorage/bucketcreation'
    depends_on:
      - filestorage
    networks:
      - filestorage
    environment:
      MINIO_ROOT_USER: ${FILESTORAGE_USER:?error}
      MINIO_ROOT_PASSWORD: ${FILESTORAGE_PASSWORD:?error}
      MINIO_SERVER: filestorage
      MINIO_PORT: 9000
      MINIO_BUCKET_NAME: riesgosfiles

  logs:
    build:
      context: ./logs
      args:
        - USERNAME=${LOGS_USER_EMAIL:?error}
        - PASSWORD=${LOGS_USER_PASSWORD:?error}
    networks:
      - web
    volumes:
      - ./logs/logs:/www/logs

  frontend:
    build:
      context: newfrontend
      args:
        - FRONTEND_PATH=/frontend/     # <-- must end with slash for relative `src` attributes to be correctly resolved
        - FILESTORAGE_URL=${FILESTORAGE_SERVER:?error}
        - QUEUE_URL=${QUEUE_SERVER:?error}/queue/
        - FASTAPI_URL=${BACKEND_SERVER:?error}/backend/
        - LOGS_URL=${LOGS_SERVER:?error}/logs/
    networks:
      - web

  reverse_proxy:
    image: nginx:1.23.2-alpine
    ports:
      - 80:80
    networks:
      - filestorage
      - web
      - db
      - queue
    depends_on:
      - backend
      - filestorage
      - logs
    volumes:
      - ./reverse_proxy_lrz/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./reverse_proxy_lrz/nginx.conf:/etc/nginx/nginx.conf:ro

  riesgos_wps:
    image: gfzriesgos/riesgos-wps
    ports:
      - 8000:8000

volumes:
  postgresdata:
  pulsardata:
  pulsarconf:
  filestoragedata:
  shakyground-metadata:
  quakeledger-metadata:
  assetmaster-metadata:
  modelprop-metadata:
  deus-metadata:

networks:
  db:
  queue:
  filestorage:
  web:
